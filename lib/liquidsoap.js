// Generated by CoffeeScript 1.3.1
(function() {
  var Source,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  module.exports.Client = (function() {

    Client.name = 'Client';

    function Client(opts) {
      this.opts = opts;
      this.http_request = __bind(this.http_request, this);

      if (opts.auth != null) {
        this.auth = new Buffer("" + opts.auth).toString("base64");
      }
      this.host = opts.host;
      this.http = require(opts.scheme || "http");
      this.port = opts.port || 80;
      this.name = opts.name;
    }

    Client.prototype.http_request = function(opts, fn) {
      var expects, headers, query, req;
      expects = opts.expects || 200;
      query = opts.query;
      headers = {
        "Accept": "application/json"
      };
      if (this.auth != null) {
        headers["Authorization"] = "Basic " + this.auth;
      }
      opts = {
        hostname: this.host,
        port: this.port,
        method: opts.method,
        path: opts.path,
        headers: headers
      };
      if (query != null) {
        query = JSON.stringify(query);
        opts.headers["Content-Type"] = "application/json";
        opts.headers["Content-Length"] = query.length;
      }
      req = this.http.request(opts, function(res) {
        var data;
        if (res.statusCode !== expects) {
          return fn(res, null);
        }
        data = "";
        res.on("data", function(buf) {
          return data += buf;
        });
        return res.on("end", function() {
          try {
            data = JSON.parse(data);
          } catch (err) {

          }
          return fn(null, data);
        });
      });
      return req.end(query);
    };

    return Client;

  })();

  Source = (function() {

    Source.name = 'Source';

    function Source() {}

    Source.create = function(dst, src) {
      var label, res, value;
      res = new dst(src.opts);
      for (label in src) {
        value = src[label];
        if (res[label] == null) {
          res[label] = value;
        }
      }
      return res;
    };

    return Source;

  })();

  module.exports.Blank = (function(_super) {

    __extends(Blank, _super);

    Blank.name = 'Blank';

    function Blank() {
      return Blank.__super__.constructor.apply(this, arguments);
    }

    Blank.create = function(source, duration, fn) {
      var res;
      if (fn == null) {
        fn = duration;
        duration = 0;
      }
      res = Source.create(Blank, source);
      return res.http_request({
        method: "PUT",
        path: "/blank/" + source.name,
        query: opts
      }, function(err) {
        if (err != null) {
          return fn(err, null);
        }
        return fn(null, res);
      });
    };

    return Blank;

  }).call(this, Source);

  module.exports.Request = {};

  module.exports.Request.Queue = (function(_super) {

    __extends(Queue, _super);

    Queue.name = 'Queue';

    function Queue() {
      this.push = __bind(this.push, this);
      return Queue.__super__.constructor.apply(this, arguments);
    }

    Queue.create = function(opts, fn) {
      var res;
      res = Source.create(Queue, opts);
      return res.http_request({
        method: "PUT",
        path: "/request/queue/" + res.name
      }, function(err) {
        if (err != null) {
          return fn(err, null);
        }
        return fn(null, res);
      });
    };

    Queue.prototype.push = function(requests, fn) {
      if (!(requests instanceof Array)) {
        requests = [requests];
      }
      return this.http_request({
        method: "POST",
        path: "/requests/" + this.name,
        query: requests
      }, fn);
    };

    return Queue;

  }).call(this, Source);

  module.exports.Metadata = {};

  module.exports.Metadata.Get = (function(_super) {

    __extends(Get, _super);

    Get.name = 'Get';

    function Get() {
      this.get_metadata = __bind(this.get_metadata, this);
      return Get.__super__.constructor.apply(this, arguments);
    }

    Get.create = function(opts, fn) {
      var res;
      res = Source.create(Get, opts);
      return res.http_request({
        method: "PUT",
        path: "/get_metadata/" + res.name
      }, function(err) {
        if (err != null) {
          return fn(err, null);
        }
        return fn(null, res);
      });
    };

    Get.prototype.get_metadata = function(fn) {
      return this.http_request({
        method: "GET",
        path: "/metadata/" + this.name
      }, fn);
    };

    return Get;

  }).call(this, Source);

  module.exports.Metadata.Set = (function(_super) {

    __extends(Set, _super);

    Set.name = 'Set';

    function Set() {
      this.set_metadata = __bind(this.set_metadata, this);
      return Set.__super__.constructor.apply(this, arguments);
    }

    Set.create = function(opts, fn) {
      var res;
      res = Source.create(Set, opts);
      return res.http_request({
        method: "PUT",
        path: "/set_metadata/" + res.name
      }, function(err) {
        if (err != null) {
          return fn(err, null);
        }
        return fn(null, res);
      });
    };

    Set.prototype.set_metadata = function(metadata, fn) {
      return this.http_request({
        method: "POST",
        path: "/metadata/" + this.name,
        query: metadata
      }, fn);
    };

    return Set;

  }).call(this, Source);

  module.exports.Output = {};

  module.exports.Output.Ao = (function(_super) {

    __extends(Ao, _super);

    Ao.name = 'Ao';

    function Ao() {
      return Ao.__super__.constructor.apply(this, arguments);
    }

    Ao.create = function(source, fn) {
      var res;
      res = Source.create(Ao, source);
      return res.http_request({
        method: "PUT",
        path: "/output/ao/" + source.name
      }, function(err) {
        if (err != null) {
          return fn(err, null);
        }
        return fn(null, res);
      });
    };

    return Ao;

  }).call(this, Source);

  module.exports.Mksafe = (function(_super) {

    __extends(Mksafe, _super);

    Mksafe.name = 'Mksafe';

    function Mksafe() {
      return Mksafe.__super__.constructor.apply(this, arguments);
    }

    Mksafe.create = function(source, fn) {
      var res;
      res = Source.create(Mksafe, source);
      return res.http_request({
        method: "PUT",
        path: "/mksafe/" + source.name
      }, function(err) {
        if (err != null) {
          return fn(err, null);
        }
        return fn(null, res);
      });
    };

    return Mksafe;

  }).call(this, Source);

  module.exports.Fallback = (function(_super) {

    __extends(Fallback, _super);

    Fallback.name = 'Fallback';

    function Fallback() {
      return Fallback.__super__.constructor.apply(this, arguments);
    }

    Fallback.create = function(client, sources, opts, fn) {
      var res, source;
      if (fn == null) {
        fn = opts;
        opts = {};
      }
      res = Source.create(Fallback, client);
      sources = [
        (function() {
          var _results;
          _results = [];
          for (source in sources) {
            _results.push(source.name);
          }
          return _results;
        })()
      ];
      return res.http_request({
        method: "PUT",
        path: "/fallback/" + source.name,
        query: {
          souces: sources,
          options: opts
        }
      }, function(err) {
        if (err != null) {
          return fn(err, null);
        }
        return fn(null, res);
      });
    };

    return Fallback;

  }).call(this, Source);

}).call(this);
